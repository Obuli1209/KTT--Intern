database
 - stored in organized collection of structured information.
 - stored in electronically.

need of database
 - storing,managing and retrieving amount of data.
 - in one data it is remember incase more amount of data come, so need database for storing.

different types of databases
 - SQL, NoSQL, cloud databases, object-oriented databases, Network databases.

SQL - structured Query Langauge(RDBMS)
 - tables with rows and columns.
 - SQL is interact with database.
 - fixed schema.
 - ACID compliant.
 - MySQL, PostgreSQL, Oracle, MS SQL Server

 NoSQL - Non structured Query language(Non-RDMS)
 - key-values, graph based, document based.
 - flexiable schema.
 - BASE compliant.
 - MongoDB, Cassandra, CouchDB.

 ACID Properties
 - Atomicity - Transactions fully completed or failure. In, partial complete it takes as failure.
 - Consistency - work consistencly.
 - Isolation - If read or write in any one operation in database, it couldnot affect the another operations.
 - Durability - once transaction is committed, event of systems fail, it stored the data permanently , not lost.

ACID is an acronym that describes the key properties of a reliable database transaction:

ðŸ”¹ A â€” Atomicity
"All or nothing"

A transaction must either complete fully or not at all.

If one part of the transaction fails, the entire transaction is rolled back.

Example:

Transferring â‚¹500 from Account A to Account B must debit A and credit B â€” both must succeed or neither should.

ðŸ”¹ C â€” Consistency
"Valid state transition"

A transaction must leave the database in a valid state, maintaining all defined rules, constraints, and data integrity.

Example:

A foreign key must always point to an existing record; no orphan records allowed after a transaction.

ðŸ”¹ I â€” Isolation
"Concurrent safety"

Transactions do not interfere with each other even when run at the same time.

Ensures that intermediate transaction steps are not visible to others.

Example:

Two users booking the last seat on a train â€” the system ensures that only one actually books it.

ðŸ”¹ D â€” Durability
"Permanent change"

Once a transaction is committed, it persists, even in the case of system failure or crash.

Example:

After a successful online order, even if the server crashes, your order remains saved.

 MySQL and PostgreSQL are the "software" that manages databases.

 RDBMS - Relational Database Management System.
 - it is a software, manage and store relational data.       Database->software(RDBMS(MYsql,postgresql))->SQL
 - RDBMS use SQL to interact with database.                  Database->software(NRDBMS(MongoDB))->Nosql.
 - tables-> rows and columns.

 - Primary key-> uniquely identify each record on a table, unique identifier in each row.
 - Foreign key-> relationship between primary key and another table.
 - composite key-> It is primary key combining two or more columns.

 - one to one-> one table in single record exactly associated with the another table.
 - one to many-> one record in a table associated with multiple tables. 
 (EX: customer, order the many orders but all orders have only one customer).
 - many to many-> many records in a table associated with many records in another table.
 (EX: customers purchase many products and many products purchased by different customers).


 Mysql
 - fast read and write.
 
 postgresql
 - fast posting.
 - bulk datas post becuase of binary copy method.



 Syntax
DDL - Data Definition Language

create database Shopping;

create table Customers(
  customer_id int,
  first_name varchar(255),
  last_name varchar(255),
  age int,
  country varchar(255)
);

alter table Customers                                   -> add the new column using alter keyword.
add column phone_number varchar(15);

drop table Customers;                                   -> to delete the customer table and data also.



Datatypes:
 - Numeric Datatypes
      - BIT, TINYINT, SMALLINT, INT, BIGINT.
 - String Datatypes
      - CHAR(8000), VARCHAR(8000), TEXT(2GB), IMAGE(2GB), BLOB, MEDIUMBLOB, LONGBLOB.
 - Date and Time Datatypes.
      - DATE, TIME, DATETIME,YEAR, TIMESTAMP. 

Seven Constraints:
 - primary key, foriegn key, NOT NULL, UNIQUE, CHECK, DEFAULT, INDEX.

 

 DML - Data Manipulation language
 - To access and manipulate the datas in table.
 - SELECT, INSERT, UPDATE, DELETE.

 CREATE TABLE "Users"(
    id SERIAL NOT NULL,
    name varchar(255) NOT NULL,
    password varchar(255) NOT NULL,
    email varchar(255) NOT NULL,
    phone varchar(255) NOT NULL,
    status integer DEFAULT 1,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    "UserRoleId" integer NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT Users_UserRoleId_fkey FOREIGN key("UserRoleId") REFERENCES "UserRoles"(id)
);

SELECT id, name, "password", email, phone, status, "createdAt", "updatedAt", "UserRoleId"
FROM public."Users";

insert into "Users" (id, name, "password", email, phone, status, "createdAt", "updatedAt","UserRoleId")
values (3,'Sridhar','sri','sridhar@gmail.com','9361877619',2,now(),now(),2);


update "Users" set "password" = 'pass123'
where id =3;

update "Users" set email = 'sridharsri@gmail.com'
where id =3;


delete from "Users" 
where id=2;

select * from "Users"
order by name asc;

select name, count(*) as "Total_count"
from "Users"
group by name;


select sum(status) from "Users";

select max(id) from "Users";

select min(id) from "Users";


Joining table
-Inner Joining
   - combine rows that have matching values in a field common to both tables.

select  "Users".name, "UserRoles".name
from "Users"
inner join "UserRoles"
on "Users"."UserRoleId" = "UserRoles".id;


-Left joining
   - retrieve all records from left table and matching records from right table.
   - if no matching in right table it returns the NULL value.

select "Users".id, "Users".name,"Users".email,"Users".password,"Users".phone, "UserRoles".name, "UserRoles".status
from "Users"
left join "UserRoles"
on "Users"."UserRoleId" = "UserRoles".id;


-Right Joining
   - retrieve all records from right table and matching records from left table.
   - If no matching in left table it returns the NULL value.

select "Users".id, "Users".name,"Users".email,"Users".password,"Users".phone, "UserRoles".name, "UserRoles".status
from "Users"
right join "UserRoles"
on "Users"."UserRoleId" = "UserRoles".id;